{"ast":null,"code":"import ProductsList from './components/ProductsList';\nimport data from './data';\nimport Header from './components/Header';\nimport Categories from './components/Categories';\nimport ShowFullItem from './components/ShowFullItem';\nimport Footer from './components/Footer';\nimport { useDispatch, useSelector } from 'react-redux';\n\n// class App extends React.Component {\n//   constructor(props){\n//     super(props)\n//     this.state = {\n//       products:data,\n//       orders:[],\n//       fullItem:{},\n//       showFullItem:false,\n//     }\n//     this.state.current = this.state.products\n\n//     this.addToCart = this.addToCart.bind(this)\n//     this.clearCart = this.clearCart.bind(this)\n//     this.orderIncrement = this.orderIncrement.bind(this)\n//     this.orderDecrement = this.orderDecrement.bind(this)\n//     this.deleteOrder = this.deleteOrder.bind(this)\n//     this.onOpenItem = this.onOpenItem.bind(this)\n//     this.chooseCategory = this.chooseCategory.bind(this)\n//   }\n//   render(){\n//     const dispatch = useDispatch()\n//     const cart = useSelector(state => state.products)\n//     console.log(cart);\n//     return (\n//       <div className=\"App\">\n//         <Header onClear={this.clearCart}\n//         onDelete={this.deleteOrder} orders={this.state.orders}\n//          onUp={this.orderIncrement} onDown={this.orderDecrement}/>\n//          <main>\n//           <Categories choose={this.chooseCategory}/>\n//           <ProductsList onShow={this.onOpenItem} onAdd={this.addToCart} items={this.state.current}/>\n//           {this.state.showFullItem && <ShowFullItem onAdd={this.addToCart} onShow={this.onOpenItem} item={this.state.fullItem}/>}\n//           <Footer/>\n//          </main>\n//       </div>\n//     );\n//   }\n//   chooseCategory(category){\n//     if(category === 'all'){\n//       this.setState({current:this.state.products})\n//     }else{\n//       this.setState({current:this.state.products.filter(item => item.category === category)})\n//     }\n//   }\n//   onOpenItem(item){\n//     this.setState({showFullItem: !this.state.showFullItem, fullItem:item})\n//   }\n//   clearCart(){\n//     this.setState({orders: []})\n//   }\n//   deleteOrder(item){\n//     this.setState({orders: this.state.orders.filter(el => el !== item)})\n//   }\n//   addToCart(item){\n//     let isInCart = false\n//     this.state.orders.forEach(el => {\n//       if(item.id === el.id && item.size === el.size && item.type === el.type){\n//         isInCart = true\n//       }\n//     })\n//     if (isInCart) {\n//       const order = this.state.orders.find(el => el.id === item.id && el.size === item.size && item.type === el.type)\n//       order.count += 1\n//       this.setState({orders: this.state.orders.map(u => u !== order ? u : order)})\n//     } else {\n//       item.count = 1\n//       this.setState({orders: [...this.state.orders, item]})\n//     } \n//   }\n//   orderDecrement(item){\n//     if(item.count > 1){\n//       item.count -= 1\n//       this.setState({orders: this.state.orders.map(u => u !== item ? u : item)})\n//     }else{\n//       this.setState({orders: this.state.orders.filter(el => el !== item)})\n//     }\n//   }\n//   orderIncrement(item){\n//     item.count += 1\n//     this.setState({orders: this.state.orders.map(u => u !== item ? u : item)})\n//   }\n// }\n\n// export default App;","map":{"version":3,"names":["ProductsList","data","Header","Categories","ShowFullItem","Footer","useDispatch","useSelector"],"sources":["E:/Курс программирования/React Projects/food-delivery/src/App.js"],"sourcesContent":["import ProductsList from './components/ProductsList';\nimport data from './data';\nimport Header from './components/Header';\nimport Categories from './components/Categories';\nimport ShowFullItem from './components/ShowFullItem';\nimport Footer from './components/Footer';\nimport { useDispatch, useSelector } from 'react-redux';\n\n// class App extends React.Component {\n//   constructor(props){\n//     super(props)\n//     this.state = {\n//       products:data,\n//       orders:[],\n//       fullItem:{},\n//       showFullItem:false,\n//     }\n//     this.state.current = this.state.products\n\n//     this.addToCart = this.addToCart.bind(this)\n//     this.clearCart = this.clearCart.bind(this)\n//     this.orderIncrement = this.orderIncrement.bind(this)\n//     this.orderDecrement = this.orderDecrement.bind(this)\n//     this.deleteOrder = this.deleteOrder.bind(this)\n//     this.onOpenItem = this.onOpenItem.bind(this)\n//     this.chooseCategory = this.chooseCategory.bind(this)\n//   }\n//   render(){\n//     const dispatch = useDispatch()\n//     const cart = useSelector(state => state.products)\n//     console.log(cart);\n//     return (\n//       <div className=\"App\">\n//         <Header onClear={this.clearCart}\n//         onDelete={this.deleteOrder} orders={this.state.orders}\n//          onUp={this.orderIncrement} onDown={this.orderDecrement}/>\n//          <main>\n//           <Categories choose={this.chooseCategory}/>\n//           <ProductsList onShow={this.onOpenItem} onAdd={this.addToCart} items={this.state.current}/>\n//           {this.state.showFullItem && <ShowFullItem onAdd={this.addToCart} onShow={this.onOpenItem} item={this.state.fullItem}/>}\n//           <Footer/>\n//          </main>\n//       </div>\n//     );\n//   }\n//   chooseCategory(category){\n//     if(category === 'all'){\n//       this.setState({current:this.state.products})\n//     }else{\n//       this.setState({current:this.state.products.filter(item => item.category === category)})\n//     }\n//   }\n//   onOpenItem(item){\n//     this.setState({showFullItem: !this.state.showFullItem, fullItem:item})\n//   }\n//   clearCart(){\n//     this.setState({orders: []})\n//   }\n//   deleteOrder(item){\n//     this.setState({orders: this.state.orders.filter(el => el !== item)})\n//   }\n//   addToCart(item){\n//     let isInCart = false\n//     this.state.orders.forEach(el => {\n//       if(item.id === el.id && item.size === el.size && item.type === el.type){\n//         isInCart = true\n//       }\n//     })\n//     if (isInCart) {\n//       const order = this.state.orders.find(el => el.id === item.id && el.size === item.size && item.type === el.type)\n//       order.count += 1\n//       this.setState({orders: this.state.orders.map(u => u !== order ? u : order)})\n//     } else {\n//       item.count = 1\n//       this.setState({orders: [...this.state.orders, item]})\n//     } \n//   }\n//   orderDecrement(item){\n//     if(item.count > 1){\n//       item.count -= 1\n//       this.setState({orders: this.state.orders.map(u => u !== item ? u : item)})\n//     }else{\n//       this.setState({orders: this.state.orders.filter(el => el !== item)})\n//     }\n//   }\n//   orderIncrement(item){\n//     item.count += 1\n//     this.setState({orders: this.state.orders.map(u => u !== item ? u : item)})\n//   }\n// }\n\n// export default App;"],"mappings":"AAAA,OAAOA,YAAY,MAAM,2BAA2B;AACpD,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,YAAY,MAAM,2BAA2B;AACpD,OAAOC,MAAM,MAAM,qBAAqB;AACxC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}